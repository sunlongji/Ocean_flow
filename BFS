public class Solution {
    int[][] dir=new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res=new LinkedList<>();
        if(matrix==null||matrix.length==0||matrix[0].length==0){
            return res;
        }
        int m=matrix.length, n=matrix[0].length;
        boolean[][] pacific=new boolean[m][n];
        boolean[][] atlantic=new boolean[m][n];
        Queue<int[]> pQueue=new LinkedList<>();
        Queue<int[]> aQueue=new LinkedList<>();
        
        for(int i=0;i<m;i++){
            pQueue.offer(new int[]{i,0});
            aQueue.offer(new int[]{i,n-1});
            pacific[i][0]=true;
            atlantic[i][n-1]=true;
        }
        
        for(int j=0;j<n;j++){
            pQueue.offer(new int[]{0,j});
            aQueue.offer(new int[]{m-1,j});
            pacific[0][j]=true;
            atlantic[m-1][j]=true;
        }
        
        bfs(matrix,pQueue,pacific);
        bfs(matrix,aQueue,atlantic);
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j]&&atlantic[i][j]){
                    res.add(new int[]{i,j});
                }
            }
        }
        
        return res;
    }
    private void bfs(int[][] matrix, Queue<int[]> queue, boolean[][] visited){
        int m=matrix.length, n=matrix[0].length;
        while(!queue.isEmpty()){
            int[] cur=queue.poll();
            for(int[] d:dir){
                int x=cur[0]+d[0];
                int y=cur[1]+d[1];
                if(x<0||x>=m||y<0||y>=n||visited[x][y]||matrix[x][y]<matrix[cur[0]][cur[1]])    continue;
                visited[x][y]=true;
                queue.offer(new int[]{x,y});
            }
        }
    }
}
